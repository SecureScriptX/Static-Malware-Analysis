
## File Analysis

**Objective:** Determine if the file contains a VBA macro.

**Procedure:** Use appropriate tools or manual inspection to identify the presence of a VBA macro within the file.
**oleid**

---

## Malicious Activity Detection

**Objective:** Identify any malicious activity triggered upon opening the document.

**Procedure:** Analyze system logs or use security tools to detect and document any suspicious behavior associated with the document's opening.
**olevba **
---

## Macro Keyword Identification

**Objective:** Identify the macro keyword responsible for triggering malicious activity.

**Procedure:** Investigate the VBA code within the document to pinpoint the specific macro keyword associated with the observed malicious behavior.
**olemeta tool**
---

## Last Saved Time Investigation

**Objective:** Determine the last saved time of the file.

**Procedure:** Extract file metadata or use relevant commands/tools to retrieve the timestamp indicating the last save operation on the file.
**Use the "olemeta" and check properties**
---

## Download Activity Analysis

**Objective:** Identify the domain from which the malicious file is attempting to download additional files.

**Procedure:** Inspect the VBA code or relevant logs to identify the address or domain targeted for file downloads.
**olevba Siparis_17.xls | grep http**
---

## IOC Count with Olevba

**Objective:** Determine the number of Indicators of Compromise (IOCs) in the file using Olevba.

**Procedure:** Execute the command `olevba --iocs [filename.vba]` and document the count of identified IOCs.
**Look at the end of the Olevba output.**
